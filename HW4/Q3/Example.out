` program
 ` main_class
  ` class
  ` QuickSort
   ` QuickSort
  ` {
  ` public
  ` static
  ` void
  ` main
  ` (
  ` String
  ` [
  ` ]
  ` a
   ` a
  ` )
  ` {
  ` statement
   ` System.out.println
   ` (
   ` expression
    ` expression
     ` new
     ` QS
      ` QS
     ` (
     ` )
    ` .
    ` Start
     ` Start
    ` (
    ` expression
     ` 10
    ` )
   ` )
   ` ;
  ` }
  ` }
 ` class_declaration
  ` class
  ` QS
   ` QS
  ` {
  ` var_dec
   ` type
    ` int
    ` [
    ` ]
   ` number
    ` number
   ` ;
  ` var_dec
   ` type
    ` int
   ` size
    ` size
   ` ;
  ` method
   ` public
   ` type
    ` int
   ` Start
    ` Start
   ` (
   ` type
    ` int
   ` sz
    ` sz
   ` )
   ` {
   ` var_dec
    ` type
     ` int
    ` aux01
     ` aux01
    ` ;
   ` statement
    ` aux01
     ` aux01
    ` =
    ` expression
     ` expression
      ` this
     ` .
     ` Init
      ` Init
     ` (
     ` expression
      ` sz
       ` sz
     ` )
    ` ;
   ` statement
    ` aux01
     ` aux01
    ` =
    ` expression
     ` expression
      ` this
     ` .
     ` Print
      ` Print
     ` (
     ` )
    ` ;
   ` statement
    ` System.out.println
    ` (
    ` expression
     ` 9999
    ` )
    ` ;
   ` statement
    ` aux01
     ` aux01
    ` =
    ` expression
     ` expression
      ` size
       ` size
     ` -
     ` expression
      ` 1
    ` ;
   ` statement
    ` aux01
     ` aux01
    ` =
    ` expression
     ` expression
      ` this
     ` .
     ` Sort
      ` Sort
     ` (
     ` expression
      ` 0
     ` ,
     ` expression
      ` aux01
       ` aux01
     ` )
    ` ;
   ` statement
    ` aux01
     ` aux01
    ` =
    ` expression
     ` expression
      ` this
     ` .
     ` Print
      ` Print
     ` (
     ` )
    ` ;
   ` return
   ` expression
    ` 0
   ` ;
   ` }
  ` method
   ` public
   ` type
    ` int
   ` Sort
    ` Sort
   ` (
   ` type
    ` int
   ` left
    ` left
   ` ,
   ` type
    ` int
   ` right
    ` right
   ` )
   ` {
   ` var_dec
    ` type
     ` int
    ` v
     ` v
    ` ;
   ` var_dec
    ` type
     ` int
    ` i
     ` i
    ` ;
   ` var_dec
    ` type
     ` int
    ` j
     ` j
    ` ;
   ` var_dec
    ` type
     ` int
    ` nt
     ` nt
    ` ;
   ` var_dec
    ` type
     ` int
    ` t
     ` t
    ` ;
   ` var_dec
    ` type
     ` boolean
    ` cont01
     ` cont01
    ` ;
   ` var_dec
    ` type
     ` boolean
    ` cont02
     ` cont02
    ` ;
   ` var_dec
    ` type
     ` int
    ` aux03
     ` aux03
    ` ;
   ` statement
    ` t
     ` t
    ` =
    ` expression
     ` 0
    ` ;
   ` statement
    ` if
    ` (
    ` expression
     ` expression
      ` left
       ` left
     ` <
     ` expression
      ` right
       ` right
    ` )
    ` statement
     ` {
     ` statement
      ` v
       ` v
      ` =
      ` expression
       ` expression
        ` number
         ` number
       ` [
       ` expression
        ` right
         ` right
       ` ]
      ` ;
     ` statement
      ` i
       ` i
      ` =
      ` expression
       ` expression
        ` left
         ` left
       ` -
       ` expression
        ` 1
      ` ;
     ` statement
      ` j
       ` j
      ` =
      ` expression
       ` right
        ` right
      ` ;
     ` statement
      ` cont01
       ` cont01
      ` =
      ` expression
       ` true
      ` ;
     ` statement
      ` while
      ` (
      ` expression
       ` cont01
        ` cont01
      ` )
      ` statement
       ` {
       ` statement
        ` cont02
         ` cont02
        ` =
        ` expression
         ` true
        ` ;
       ` statement
        ` while
        ` (
        ` expression
         ` cont02
          ` cont02
        ` )
        ` statement
         ` {
         ` statement
          ` i
           ` i
          ` =
          ` expression
           ` expression
            ` i
             ` i
           ` +
           ` expression
            ` 1
          ` ;
         ` statement
          ` aux03
           ` aux03
          ` =
          ` expression
           ` expression
            ` number
             ` number
           ` [
           ` expression
            ` i
             ` i
           ` ]
          ` ;
         ` statement
          ` if
          ` (
          ` expression
           ` !
           ` expression
            ` (
            ` expression
             ` expression
              ` aux03
               ` aux03
             ` <
             ` expression
              ` v
               ` v
            ` )
          ` )
          ` statement
           ` cont02
            ` cont02
           ` =
           ` expression
            ` false
           ` ;
          ` else
          ` statement
           ` cont02
            ` cont02
           ` =
           ` expression
            ` true
           ` ;
         ` }
       ` statement
        ` cont02
         ` cont02
        ` =
        ` expression
         ` true
        ` ;
       ` statement
        ` while
        ` (
        ` expression
         ` cont02
          ` cont02
        ` )
        ` statement
         ` {
         ` statement
          ` j
           ` j
          ` =
          ` expression
           ` expression
            ` j
             ` j
           ` -
           ` expression
            ` 1
          ` ;
         ` statement
          ` aux03
           ` aux03
          ` =
          ` expression
           ` expression
            ` number
             ` number
           ` [
           ` expression
            ` j
             ` j
           ` ]
          ` ;
         ` statement
          ` if
          ` (
          ` expression
           ` !
           ` expression
            ` (
            ` expression
             ` expression
              ` v
               ` v
             ` <
             ` expression
              ` aux03
               ` aux03
            ` )
          ` )
          ` statement
           ` cont02
            ` cont02
           ` =
           ` expression
            ` false
           ` ;
          ` else
          ` statement
           ` cont02
            ` cont02
           ` =
           ` expression
            ` true
           ` ;
         ` }
       ` statement
        ` t
         ` t
        ` =
        ` expression
         ` expression
          ` number
           ` number
         ` [
         ` expression
          ` i
           ` i
         ` ]
        ` ;
       ` statement
        ` number
         ` number
        ` [
        ` expression
         ` i
          ` i
        ` ]
        ` =
        ` expression
         ` expression
          ` number
           ` number
         ` [
         ` expression
          ` j
           ` j
         ` ]
        ` ;
       ` statement
        ` number
         ` number
        ` [
        ` expression
         ` j
          ` j
        ` ]
        ` =
        ` expression
         ` t
          ` t
        ` ;
       ` statement
        ` if
        ` (
        ` expression
         ` expression
          ` j
           ` j
         ` <
         ` expression
          ` (
          ` expression
           ` expression
            ` i
             ` i
           ` +
           ` expression
            ` 1
          ` )
        ` )
        ` statement
         ` cont01
          ` cont01
         ` =
         ` expression
          ` false
         ` ;
        ` else
        ` statement
         ` cont01
          ` cont01
         ` =
         ` expression
          ` true
         ` ;
       ` }
     ` statement
      ` number
       ` number
      ` [
      ` expression
       ` j
        ` j
      ` ]
      ` =
      ` expression
       ` expression
        ` number
         ` number
       ` [
       ` expression
        ` i
         ` i
       ` ]
      ` ;
     ` statement
      ` number
       ` number
      ` [
      ` expression
       ` i
        ` i
      ` ]
      ` =
      ` expression
       ` expression
        ` number
         ` number
       ` [
       ` expression
        ` right
         ` right
       ` ]
      ` ;
     ` statement
      ` number
       ` number
      ` [
      ` expression
       ` right
        ` right
      ` ]
      ` =
      ` expression
       ` t
        ` t
      ` ;
     ` statement
      ` nt
       ` nt
      ` =
      ` expression
       ` expression
        ` this
       ` .
       ` Sort
        ` Sort
       ` (
       ` expression
        ` left
         ` left
       ` ,
       ` expression
        ` expression
         ` i
          ` i
        ` -
        ` expression
         ` 1
       ` )
      ` ;
     ` statement
      ` nt
       ` nt
      ` =
      ` expression
       ` expression
        ` this
       ` .
       ` Sort
        ` Sort
       ` (
       ` expression
        ` expression
         ` i
          ` i
        ` +
        ` expression
         ` 1
       ` ,
       ` expression
        ` right
         ` right
       ` )
      ` ;
     ` }
    ` else
    ` statement
     ` nt
      ` nt
     ` =
     ` expression
      ` 0
     ` ;
   ` return
   ` expression
    ` 0
   ` ;
   ` }
  ` method
   ` public
   ` type
    ` int
   ` Print
    ` Print
   ` (
   ` )
   ` {
   ` var_dec
    ` type
     ` int
    ` j
     ` j
    ` ;
   ` statement
    ` j
     ` j
    ` =
    ` expression
     ` 0
    ` ;
   ` statement
    ` while
    ` (
    ` expression
     ` expression
      ` j
       ` j
     ` <
     ` expression
      ` (
      ` expression
       ` size
        ` size
      ` )
    ` )
    ` statement
     ` {
     ` statement
      ` System.out.println
      ` (
      ` expression
       ` expression
        ` number
         ` number
       ` [
       ` expression
        ` j
         ` j
       ` ]
      ` )
      ` ;
     ` statement
      ` j
       ` j
      ` =
      ` expression
       ` expression
        ` j
         ` j
       ` +
       ` expression
        ` 1
      ` ;
     ` }
   ` return
   ` expression
    ` 0
   ` ;
   ` }
  ` method
   ` public
   ` type
    ` int
   ` Init
    ` Init
   ` (
   ` type
    ` int
   ` sz
    ` sz
   ` )
   ` {
   ` statement
    ` size
     ` size
    ` =
    ` expression
     ` sz
      ` sz
    ` ;
   ` statement
    ` number
     ` number
    ` =
    ` expression
     ` new
     ` int
     ` [
     ` expression
      ` sz
       ` sz
     ` ]
    ` ;
   ` statement
    ` number
     ` number
    ` [
    ` expression
     ` 0
    ` ]
    ` =
    ` expression
     ` 20
    ` ;
   ` statement
    ` number
     ` number
    ` [
    ` expression
     ` 1
    ` ]
    ` =
    ` expression
     ` 7
    ` ;
   ` statement
    ` number
     ` number
    ` [
    ` expression
     ` 2
    ` ]
    ` =
    ` expression
     ` 12
    ` ;
   ` statement
    ` number
     ` number
    ` [
    ` expression
     ` 3
    ` ]
    ` =
    ` expression
     ` 18
    ` ;
   ` statement
    ` number
     ` number
    ` [
    ` expression
     ` 4
    ` ]
    ` =
    ` expression
     ` 2
    ` ;
   ` statement
    ` number
     ` number
    ` [
    ` expression
     ` 5
    ` ]
    ` =
    ` expression
     ` 11
    ` ;
   ` statement
    ` number
     ` number
    ` [
    ` expression
     ` 6
    ` ]
    ` =
    ` expression
     ` 6
    ` ;
   ` statement
    ` number
     ` number
    ` [
    ` expression
     ` 7
    ` ]
    ` =
    ` expression
     ` 9
    ` ;
   ` statement
    ` number
     ` number
    ` [
    ` expression
     ` 8
    ` ]
    ` =
    ` expression
     ` 19
    ` ;
   ` statement
    ` number
     ` number
    ` [
    ` expression
     ` 9
    ` ]
    ` =
    ` expression
     ` 5
    ` ;
   ` return
   ` expression
    ` 0
   ` ;
   ` }
  ` }
 ` <EOF>
