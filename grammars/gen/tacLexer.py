# Generated from /home/amiresm/Projects/personal/compiler/tac.g4 by ANTLR 4.9.1
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2*")
        buf.write("\u012a\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\13")
        buf.write("\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\33")
        buf.write("\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3#\3#\3#\3#\3$\3$\3%\3%\7%\u00f7\n%\f%")
        buf.write("\16%\u00fa\13%\3&\3&\5&\u00fe\n&\3\'\3\'\3\'\3\'\5\'\u0104")
        buf.write("\n\'\3(\6(\u0107\n(\r(\16(\u0108\3)\6)\u010c\n)\r)\16")
        buf.write(")\u010d\3)\3)\3*\3*\3*\3*\7*\u0116\n*\f*\16*\u0119\13")
        buf.write("*\3*\3*\3*\3*\3*\3+\3+\3+\3+\7+\u0124\n+\f+\16+\u0127")
        buf.write("\13+\3+\3+\3\u0117\2,\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21")
        buf.write("\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24")
        buf.write("\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37")
        buf.write("= ?!A\"C#E$G%I&K\2M\2O\'Q(S)U*\3\2\t\3\2\62;\6\2&&C\\")
        buf.write("aac|\4\2\2\u0081\ud802\udc01\3\2\ud802\udc01\3\2\udc02")
        buf.write("\ue001\5\2\13\f\16\17\"\"\4\2\f\f\17\17\2\u012f\2\3\3")
        buf.write("\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2")
        buf.write("\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2")
        buf.write("\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2")
        buf.write("\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2")
        buf.write("\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3")
        buf.write("\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2")
        buf.write("\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3")
        buf.write("\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2O")
        buf.write("\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\3W\3\2\2\2\5")
        buf.write("]\3\2\2\2\7_\3\2\2\2\tf\3\2\2\2\13m\3\2\2\2\rr\3\2\2\2")
        buf.write("\17w\3\2\2\2\21y\3\2\2\2\23\u0080\3\2\2\2\25\u0082\3\2")
        buf.write("\2\2\27\u0084\3\2\2\2\31\u0086\3\2\2\2\33\u0088\3\2\2")
        buf.write("\2\35\u0090\3\2\2\2\37\u0092\3\2\2\2!\u0094\3\2\2\2#\u009b")
        buf.write("\3\2\2\2%\u009f\3\2\2\2\'\u00a7\3\2\2\2)\u00aa\3\2\2\2")
        buf.write("+\u00af\3\2\2\2-\u00b5\3\2\2\2/\u00c8\3\2\2\2\61\u00ca")
        buf.write("\3\2\2\2\63\u00cd\3\2\2\2\65\u00cf\3\2\2\2\67\u00d1\3")
        buf.write("\2\2\29\u00d3\3\2\2\2;\u00d5\3\2\2\2=\u00d7\3\2\2\2?\u00de")
        buf.write("\3\2\2\2A\u00e3\3\2\2\2C\u00e9\3\2\2\2E\u00ee\3\2\2\2")
        buf.write("G\u00f2\3\2\2\2I\u00f4\3\2\2\2K\u00fd\3\2\2\2M\u0103\3")
        buf.write("\2\2\2O\u0106\3\2\2\2Q\u010b\3\2\2\2S\u0111\3\2\2\2U\u011f")
        buf.write("\3\2\2\2WX\7e\2\2XY\7n\2\2YZ\7c\2\2Z[\7u\2\2[\\\7u\2\2")
        buf.write("\\\4\3\2\2\2]^\7}\2\2^\6\3\2\2\2_`\7r\2\2`a\7w\2\2ab\7")
        buf.write("d\2\2bc\7n\2\2cd\7k\2\2de\7e\2\2e\b\3\2\2\2fg\7u\2\2g")
        buf.write("h\7v\2\2hi\7c\2\2ij\7v\2\2jk\7k\2\2kl\7e\2\2l\n\3\2\2")
        buf.write("\2mn\7x\2\2no\7q\2\2op\7k\2\2pq\7f\2\2q\f\3\2\2\2rs\7")
        buf.write("o\2\2st\7c\2\2tu\7k\2\2uv\7p\2\2v\16\3\2\2\2wx\7*\2\2")
        buf.write("x\20\3\2\2\2yz\7U\2\2z{\7v\2\2{|\7t\2\2|}\7k\2\2}~\7p")
        buf.write("\2\2~\177\7i\2\2\177\22\3\2\2\2\u0080\u0081\7]\2\2\u0081")
        buf.write("\24\3\2\2\2\u0082\u0083\7_\2\2\u0083\26\3\2\2\2\u0084")
        buf.write("\u0085\7+\2\2\u0085\30\3\2\2\2\u0086\u0087\7\177\2\2\u0087")
        buf.write("\32\3\2\2\2\u0088\u0089\7g\2\2\u0089\u008a\7z\2\2\u008a")
        buf.write("\u008b\7v\2\2\u008b\u008c\7g\2\2\u008c\u008d\7p\2\2\u008d")
        buf.write("\u008e\7f\2\2\u008e\u008f\7u\2\2\u008f\34\3\2\2\2\u0090")
        buf.write("\u0091\7=\2\2\u0091\36\3\2\2\2\u0092\u0093\7.\2\2\u0093")
        buf.write(" \3\2\2\2\u0094\u0095\7t\2\2\u0095\u0096\7g\2\2\u0096")
        buf.write("\u0097\7v\2\2\u0097\u0098\7w\2\2\u0098\u0099\7t\2\2\u0099")
        buf.write("\u009a\7p\2\2\u009a\"\3\2\2\2\u009b\u009c\7k\2\2\u009c")
        buf.write("\u009d\7p\2\2\u009d\u009e\7v\2\2\u009e$\3\2\2\2\u009f")
        buf.write("\u00a0\7d\2\2\u00a0\u00a1\7q\2\2\u00a1\u00a2\7q\2\2\u00a2")
        buf.write("\u00a3\7n\2\2\u00a3\u00a4\7g\2\2\u00a4\u00a5\7c\2\2\u00a5")
        buf.write("\u00a6\7p\2\2\u00a6&\3\2\2\2\u00a7\u00a8\7k\2\2\u00a8")
        buf.write("\u00a9\7h\2\2\u00a9(\3\2\2\2\u00aa\u00ab\7g\2\2\u00ab")
        buf.write("\u00ac\7n\2\2\u00ac\u00ad\7u\2\2\u00ad\u00ae\7g\2\2\u00ae")
        buf.write("*\3\2\2\2\u00af\u00b0\7y\2\2\u00b0\u00b1\7j\2\2\u00b1")
        buf.write("\u00b2\7k\2\2\u00b2\u00b3\7n\2\2\u00b3\u00b4\7g\2\2\u00b4")
        buf.write(",\3\2\2\2\u00b5\u00b6\7U\2\2\u00b6\u00b7\7{\2\2\u00b7")
        buf.write("\u00b8\7u\2\2\u00b8\u00b9\7v\2\2\u00b9\u00ba\7g\2\2\u00ba")
        buf.write("\u00bb\7o\2\2\u00bb\u00bc\7\60\2\2\u00bc\u00bd\7q\2\2")
        buf.write("\u00bd\u00be\7w\2\2\u00be\u00bf\7v\2\2\u00bf\u00c0\7\60")
        buf.write("\2\2\u00c0\u00c1\7r\2\2\u00c1\u00c2\7t\2\2\u00c2\u00c3")
        buf.write("\7k\2\2\u00c3\u00c4\7p\2\2\u00c4\u00c5\7v\2\2\u00c5\u00c6")
        buf.write("\7n\2\2\u00c6\u00c7\7p\2\2\u00c7.\3\2\2\2\u00c8\u00c9")
        buf.write("\7?\2\2\u00c9\60\3\2\2\2\u00ca\u00cb\7(\2\2\u00cb\u00cc")
        buf.write("\7(\2\2\u00cc\62\3\2\2\2\u00cd\u00ce\7>\2\2\u00ce\64\3")
        buf.write("\2\2\2\u00cf\u00d0\7-\2\2\u00d0\66\3\2\2\2\u00d1\u00d2")
        buf.write("\7/\2\2\u00d28\3\2\2\2\u00d3\u00d4\7,\2\2\u00d4:\3\2\2")
        buf.write("\2\u00d5\u00d6\7\60\2\2\u00d6<\3\2\2\2\u00d7\u00d8\7n")
        buf.write("\2\2\u00d8\u00d9\7g\2\2\u00d9\u00da\7p\2\2\u00da\u00db")
        buf.write("\7i\2\2\u00db\u00dc\7v\2\2\u00dc\u00dd\7j\2\2\u00dd>\3")
        buf.write("\2\2\2\u00de\u00df\7v\2\2\u00df\u00e0\7t\2\2\u00e0\u00e1")
        buf.write("\7w\2\2\u00e1\u00e2\7g\2\2\u00e2@\3\2\2\2\u00e3\u00e4")
        buf.write("\7h\2\2\u00e4\u00e5\7c\2\2\u00e5\u00e6\7n\2\2\u00e6\u00e7")
        buf.write("\7u\2\2\u00e7\u00e8\7g\2\2\u00e8B\3\2\2\2\u00e9\u00ea")
        buf.write("\7v\2\2\u00ea\u00eb\7j\2\2\u00eb\u00ec\7k\2\2\u00ec\u00ed")
        buf.write("\7u\2\2\u00edD\3\2\2\2\u00ee\u00ef\7p\2\2\u00ef\u00f0")
        buf.write("\7g\2\2\u00f0\u00f1\7y\2\2\u00f1F\3\2\2\2\u00f2\u00f3")
        buf.write("\7#\2\2\u00f3H\3\2\2\2\u00f4\u00f8\5M\'\2\u00f5\u00f7")
        buf.write("\5K&\2\u00f6\u00f5\3\2\2\2\u00f7\u00fa\3\2\2\2\u00f8\u00f6")
        buf.write("\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9J\3\2\2\2\u00fa\u00f8")
        buf.write("\3\2\2\2\u00fb\u00fe\5M\'\2\u00fc\u00fe\t\2\2\2\u00fd")
        buf.write("\u00fb\3\2\2\2\u00fd\u00fc\3\2\2\2\u00feL\3\2\2\2\u00ff")
        buf.write("\u0104\t\3\2\2\u0100\u0104\n\4\2\2\u0101\u0102\t\5\2\2")
        buf.write("\u0102\u0104\t\6\2\2\u0103\u00ff\3\2\2\2\u0103\u0100\3")
        buf.write("\2\2\2\u0103\u0101\3\2\2\2\u0104N\3\2\2\2\u0105\u0107")
        buf.write("\t\2\2\2\u0106\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108")
        buf.write("\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109P\3\2\2\2\u010a")
        buf.write("\u010c\t\7\2\2\u010b\u010a\3\2\2\2\u010c\u010d\3\2\2\2")
        buf.write("\u010d\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u010f\3")
        buf.write("\2\2\2\u010f\u0110\b)\2\2\u0110R\3\2\2\2\u0111\u0112\7")
        buf.write("\61\2\2\u0112\u0113\7,\2\2\u0113\u0117\3\2\2\2\u0114\u0116")
        buf.write("\13\2\2\2\u0115\u0114\3\2\2\2\u0116\u0119\3\2\2\2\u0117")
        buf.write("\u0118\3\2\2\2\u0117\u0115\3\2\2\2\u0118\u011a\3\2\2\2")
        buf.write("\u0119\u0117\3\2\2\2\u011a\u011b\7,\2\2\u011b\u011c\7")
        buf.write("\61\2\2\u011c\u011d\3\2\2\2\u011d\u011e\b*\2\2\u011eT")
        buf.write("\3\2\2\2\u011f\u0120\7\61\2\2\u0120\u0121\7\61\2\2\u0121")
        buf.write("\u0125\3\2\2\2\u0122\u0124\n\b\2\2\u0123\u0122\3\2\2\2")
        buf.write("\u0124\u0127\3\2\2\2\u0125\u0123\3\2\2\2\u0125\u0126\3")
        buf.write("\2\2\2\u0126\u0128\3\2\2\2\u0127\u0125\3\2\2\2\u0128\u0129")
        buf.write("\b+\2\2\u0129V\3\2\2\2\n\2\u00f8\u00fd\u0103\u0108\u010d")
        buf.write("\u0117\u0125\3\2\3\2")
        return buf.getvalue()


class tacLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    Identifier = 36
    Integer = 37
    WS = 38
    COMMENT = 39
    LINE_COMMENT = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'{'", "'public'", "'static'", "'void'", "'main'", 
            "'('", "'String'", "'['", "']'", "')'", "'}'", "'extends'", 
            "';'", "','", "'return'", "'int'", "'boolean'", "'if'", "'else'", 
            "'while'", "'System.out.println'", "'='", "'&&'", "'<'", "'+'", 
            "'-'", "'*'", "'.'", "'length'", "'true'", "'false'", "'this'", 
            "'new'", "'!'" ]

    symbolicNames = [ "<INVALID>",
            "Identifier", "Integer", "WS", "COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "Identifier", "LetterOrDigit", 
                  "Letter", "Integer", "WS", "COMMENT", "LINE_COMMENT" ]

    grammarFileName = "tac.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


